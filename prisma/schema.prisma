// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model LawyerProfile {
    id                 String               @id @default(cuid())
    userId             String               @unique
    fullName           String
    licenseNumber      String
    jurisdiction       String               // Country, state, province, or region
    country            String
    verificationStatus VerificationStatus   @default(PENDING)
    contactEmail       String
    firmName           String?
    specializations    String[]             // Array of legal specializations
    yearsOfExperience  Int?
    languagesSpoken    String[]             // Array of languages
    createdAt          DateTime             @default(now())
    updatedAt          DateTime             @updatedAt

    user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    interests CaseInterest[]

    @@index([verificationStatus])
    @@index([country])
    @@index([jurisdiction])
}

model Case {
    id             String      @id @default(cuid())
    seekerId       String
    title          String
    description    String      @db.Text
    legalCategory  String
    jurisdiction   String      // Country, state, province, or region  
    country        String
    urgencyLevel   UrgencyLevel @default(MEDIUM)
    preferredLanguage String?
    status         CaseStatus  @default(ACTIVE)
    createdAt      DateTime    @default(now())
    updatedAt      DateTime    @updatedAt

    seeker    User           @relation(fields: [seekerId], references: [id], onDelete: Cascade)
    interests CaseInterest[]

    @@index([status])
    @@index([legalCategory])
    @@index([country])
    @@index([urgencyLevel])
}

model CaseInterest {
    id        String   @id @default(cuid())
    caseId    String
    lawyerId  String
    createdAt DateTime @default(now())

    case   Case          @relation(fields: [caseId], references: [id], onDelete: Cascade)
    lawyer LawyerProfile @relation(fields: [lawyerId], references: [id], onDelete: Cascade)

    @@unique([caseId, lawyerId])
}

enum UserType {
    SEEKER
    LAWYER
    ADMIN
}

enum VerificationStatus {
    PENDING
    VERIFIED
    REJECTED
}

enum CaseStatus {
    ACTIVE
    IN_REVIEW
    CLOSED
}

enum UrgencyLevel {
    LOW
    MEDIUM
    HIGH
    URGENT
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    password      String?   // For credentials authentication
    userType      UserType  @default(SEEKER)
    createdAt     DateTime  @default(now())
    accounts      Account[]
    sessions      Session[]
    lawyerProfile LawyerProfile?
    cases         Case[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
